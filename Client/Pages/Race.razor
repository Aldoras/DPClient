@page "/races/{Id:int}"
@inject HttpClient Http
@using System.Linq
@using Syncfusion.Blazor.Popups
@using FluentValidation
@using Syncfusion.Blazor.Navigations

@if (RaceData != null) 
{
<h1>Závod: @RaceData.Race_Name</h1>
<h2>Start: @RaceData.Date @RaceData.Start</h2>
<p>Propozice: @RaceData.Description</p>
}
<div>
    @if (this.ShowButtons)
    {
        <button class="e-btn primary" @onclick="@PromptBtn">Registrovat do závodu</button>
    }
</div>
<SfDialog ID="prompt_dialog" @bind-Visible="@PromptDlgVisible" Target="#target" Width="60%" Height="60%">
    <DialogTemplates>
        <Header>
            Registrace do závodu
        </Header>
        <Content>
            <EditForm Model="RegistrationData" OnValidSubmit="HandleValidSubmit">
                @* <DataAnnotationsValidator /> *@
                <Blazored.FluentValidation.FluentValidationValidator />
                <div class="row mt-2 mx-1">
                    <label for="firstName">Jméno</label>
                    <InputText id="firstName" @bind-Value="RegistrationData.FirstName" class="form-control" />
                </div>
                <div class="row mt-2 mx-1">
                    <label for="lastName">Příjmení</label>
                    <InputText id="lastName" @bind-Value="RegistrationData.LastName" class="form-control" />
                </div>
                <div class="row mt-4 mx-1">
                    <label for="age">Věk</label>
                    <InputNumber id="age" @bind-Value="RegistrationData.Birthday" class="form-control" />
                </div>
                <div class="row mt-4 mx-1">
                    <label for="gender">Pohlaví</label>
                    <InputText id="gender" @bind-Value="RegistrationData.Gender" class="form-control" />
                </div>
                @* <div class="row" mt-4>
                        <button type="submit" class="btn btn-primary">Registrovat</button>
                    </div> *@
                <div class="row mt-4">
                    <ValidationSummary />
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogEvents OnOpen="@BeforeDialogOpen" Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Registrovat" IsPrimary="true" OnClick="@HideDialog" />
        <DialogButton Content="Zrušit" OnClick="@HideDialog" />
    </DialogButtons>
</SfDialog>
@* ---------- *@
@if (GroupedByCategories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Kategorie</h2>
    <div class="col-lg-12 control-section">
        <div class="e-sample-resize-container">
            <SfToolbar Width="80%" OverflowMode="@OverflowMode.Popup">
                <ToolbarItems>
                    @foreach (var group in GroupedByCategories)
                    {
                        <ToolbarItem Id="@group.Key" Text="@group.Key" OnClick="(()=>DisplayStartingListForCategory(group.Key))" CssClass="active" />
                    }
                </ToolbarItems>
            </SfToolbar>
        </div>
    </div>
}
@if (SelectedCategory != null)
{
<DPClientVS.Client.Pages.RaceCategoryComponent Registrations="@SelectedCategory" />
}

<style>
    a,
    a:hover,
    .highcontrast #dialog a,
    .highcontrast #dialog a:hover {
        color: inherit;
        text-decoration: none;
    }

    .fabric #target .e-dialog {
        height: 306px;
    }

    .material #target .e-dialog {
        height: 270px;
    }

    .bootstrap4 #target .e-dialog {
        height: 305px;
    }

    #target .e-dialog {
        height: 270px;
    }

    #target {
        height: 500px;
    }
</style>

@code {
        [Parameter]
        public int Id { get; set; }
    private bool ShowButtons { get; set; } = true;
    private bool PromptDlgVisible { get; set; } = false;
    private string inputValue { get; set; }
    private Model.Races RaceData;
    private List<Model.Registrations> SelectedCategory { get; set; }
    private IEnumerable<IGrouping<string, Model.Registrations>> GroupedByCategories { get; set; }
    protected Model.Registrations RegistrationData { get; set; } = new Model.Registrations();

    protected override async Task OnInitializedAsync()
    {
        var registrations = await Http.GetFromJsonAsync<List<Model.Registrations>>("sample-data/registrations.json");
        GroupedByCategories = registrations.GroupBy(x => x.Category, x => x);
        DisplayStartingListForCategory();
        var races = await Http.GetFromJsonAsync<List<Model.Races>>("sample-data/races.json");
        RaceData = races.Single(x => x.Id == Id);
    }
    protected void DisplayStartingListForCategory(string key = "")
    {
        if (string.IsNullOrEmpty(key))
        {
            SelectedCategory = GroupedByCategories.SelectMany(x => x).ToList();
        }
        else
        {
            SelectedCategory = GroupedByCategories.Where(x => x.Key == key).SelectMany(x => x).ToList();
        }
    }

    private void BeforeDialogOpen(BeforeOpenEventArgs args)
    {
        this.ShowButtons = false;
    }
    protected void HandleValidSubmit()
    {
        Console.WriteLine($"Registrace pro {RegistrationData.FirstName} {RegistrationData.LastName} dokoncena");
    }

    private void DialogClose(CloseEventArgs args)
    {
        this.ShowButtons = true;
    }
    private void PromptBtn()
    {
        this.PromptDlgVisible = true;
    }
    private void HideDialog(Object e)
    {
        this.PromptDlgVisible = false;
    }

}
